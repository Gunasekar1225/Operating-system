#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>

// Structure to represent the message
struct message {
    long msg_type;  // Message type, used to distinguish different messages
    char msg_text[100];  // Message content
};

int main() {
    key_t key = ftok("msgfile", 65);  // Generate a unique key using ftok
    int msgid = msgget(key, 0666 | IPC_CREAT);  // Create or access the message queue

    if (msgid == -1) {
        perror("msgget failed");
        exit(1);
    }

    struct message msg;  // Declare a message structure

    // Create a child process using fork
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child Process: Receive message from message queue
        if (msgrcv(msgid, &msg, sizeof(msg), 1, 0) == -1) {  // Receive message of type 1
            perror("msgrcv failed");
            exit(1);
        }

        printf("Child Process: Received message: %s\n", msg.msg_text);
    } else {
        // Parent Process: Send message to message queue
        msg.msg_type = 1;  // Set message type to 1
        strcpy(msg.msg_text, "Hello from Parent Process!");

        if (msgsnd(msgid, &msg, sizeof(msg), 0) == -1) {  // Send message with type 1
            perror("msgsnd failed");
            exit(1);
        }

        printf("Parent Process: Message sent to message queue\n");

        // Wait for child process to receive the message
        wait(NULL);

        // Delete the message queue
        if (msgctl(msgid, IPC_RMID, NULL) == -1) {
            perror("msgctl failed");
            exit(1);
        }

        printf("Parent Process: Message queue deleted\n");
    }

    return 0;
}

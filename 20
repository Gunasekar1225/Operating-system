#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 3

// Shared resource
int shared_resource = 0;  // Shared data that readers and writers access

// Semaphores
sem_t mutex;        // Semaphore for mutual exclusion among readers
sem_t writeSemaphore; // Semaphore to allow only one writer at a time
int readCount = 0;   // Keeps track of the number of active readers

// Reader function
void* reader(void* arg) {
    int reader_id = *((int*)arg);

    // Start reading
    sem_wait(&mutex);  // Enter critical section to update readCount
    readCount++;
    if (readCount == 1) {
        sem_wait(&writeSemaphore);  // Block writers if it's the first reader
    }
    sem_post(&mutex);

    // Read the shared resource
    printf("Reader %d: Reading shared resource value: %d\n", reader_id, shared_resource);
    sleep(1); // Simulate reading time

    // Finish reading
    sem_wait(&mutex);  // Enter critical section to update readCount
    readCount--;
    if (readCount == 0) {
        sem_post(&writeSemaphore);  // Allow writers to write when there are no readers
    }
    sem_post(&mutex);

    return NULL;
}

// Writer function
void* writer(void* arg) {
    int writer_id = *((int*)arg);

    // Start writing
    sem_wait(&writeSemaphore);  // Wait for permission to write

    // Write to the shared resource
    printf("Writer %d: Writing to shared resource...\n", writer_id);
    shared_resource++;  // Modify the shared resource
    printf("Writer %d: New value of shared resource: %d\n", writer_id, shared_resource);
    sleep(2); // Simulate writing time

    // Finish writing
    sem_post(&writeSemaphore);  // Release the write lock

    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);          // Mutex for protecting readCount
    sem_init(&writeSemaphore, 0, 1); // Semaphore for writer control

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, (void*)&reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, (void*)&writer_ids[i]);
    }

    // Wait for all threads to complete
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writeSemaphore);

    return 0;
}

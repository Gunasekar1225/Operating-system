#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10  // Maximum number of memory blocks
#define MAX_PROCESSES 5 // Maximum number of processes

// Memory block structure
typedef struct {
    int size;
    int is_allocated; // 0 for free, 1 for allocated
} MemoryBlock;

// Function to allocate memory using First Fit strategy
void first_fit(MemoryBlock blocks[], int n, int process_size[]) {
    printf("First Fit Allocation:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int allocated = 0;
        for (int j = 0; j < n; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= process_size[i]) {
                blocks[j].is_allocated = 1;
                printf("Process %d allocated to Block %d (Size: %d)\n", i+1, j+1, blocks[j].size);
                allocated = 1;
                break;
            }
        }
        if (!allocated) {
            printf("Process %d could not be allocated memory.\n", i+1);
        }
    }
    printf("\n");
}

// Function to allocate memory using Best Fit strategy
void best_fit(MemoryBlock blocks[], int n, int process_size[]) {
    printf("Best Fit Allocation:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int best_block = -1;
        for (int j = 0; j < n; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= process_size[i]) {
                if (best_block == -1 || blocks[j].size < blocks[best_block].size) {
                    best_block = j;
                }
            }
        }
        if (best_block != -1) {
            blocks[best_block].is_allocated = 1;
            printf("Process %d allocated to Block %d (Size: %d)\n", i+1, best_block+1, blocks[best_block].size);
        } else {
            printf("Process %d could not be allocated memory.\n", i+1);
        }
    }
    printf("\n");
}

// Function to allocate memory using Worst Fit strategy
void worst_fit(MemoryBlock blocks[], int n, int process_size[]) {
    printf("Worst Fit Allocation:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int worst_block = -1;
        for (int j = 0; j < n; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= process_size[i]) {
                if (worst_block == -1 || blocks[j].size > blocks[worst_block].size) {
                    worst_block = j;
                }
            }
        }
        if (worst_block != -1) {
            blocks[worst_block].is_allocated = 1;
            printf("Process %d allocated to Block %d (Size: %d)\n", i+1, worst_block+1, blocks[worst_block].size);
        } else {
            printf("Process %d could not be allocated memory.\n", i+1);
        }
    }
    printf("\n");
}

// Function to allocate memory using Next Fit strategy
void next_fit(MemoryBlock blocks[], int n, int process_size[]) {
    printf("Next Fit Allocation:\n");
    int last_allocated = 0;
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int allocated = 0;
        for (int j = last_allocated; j < n; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= process_size[i]) {
                blocks[j].is_allocated = 1;
                printf("Process %d allocated to Block %d (Size: %d)\n", i+1, j+1, blocks[j].size);
                last_allocated = j; // Update last allocated block
                allocated = 1;
                break;
            }
        }
        if (!allocated) {
            printf("Process %d could not be allocated memory.\n", i+1);
        }
    }
    printf("\n");
}

int main() {
    MemoryBlock blocks[MAX_BLOCKS] = {
        {200, 0}, {500, 0}, {300, 0}, {600, 0}, {350, 0}, 
        {100, 0}, {400, 0}, {150, 0}, {250, 0}, {450, 0}
    };

    int process_size[MAX_PROCESSES] = {212, 417, 112, 426, 100};

    // Choose the memory allocation strategy
    int choice;
    printf("Memory Allocation Strategies:\n");
    printf("1. First Fit\n");
    printf("2. Best Fit\n");
    printf("3. Worst Fit\n");
    printf("4. Next Fit\n");
    printf("Enter the choice (1-4): ");
    scanf("%d", &choice);

    // Call the selected strategy
    switch (choice) {
        case 1:
            first_fit(blocks, MAX_BLOCKS, process_size);
            break;
        case 2:
            best_fit(blocks, MAX_BLOCKS, process_size);
            break;
        case 3:
            worst_fit(blocks, MAX_BLOCKS, process_size);
            break;
        case 4:
            next_fit(blocks, MAX_BLOCKS, process_size);
            break;
        default:
            printf("Invalid choice.\n");
            break;
    }

    return 0;
}

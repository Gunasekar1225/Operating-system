#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Define the number of philosophers
#define N 5

// Mutexes for the forks
pthread_mutex_t forks[N];

// Function that simulates the behavior of a philosopher
void* philosopher(void* num) {
    int philosopher_number = *(int*)num;

    while (1) {
        // Philosopher is thinking
        printf("Philosopher %d is thinking.\n", philosopher_number);
        sleep(rand() % 3 + 1);  // Simulate thinking time

        // Philosopher is hungry and trying to pick up forks
        printf("Philosopher %d is hungry.\n", philosopher_number);

        // Pick up left fork (mutex at philosopher_number)
        pthread_mutex_lock(&forks[philosopher_number]);

        // Pick up right fork (mutex at philosopher_number + 1, wrap around using modulo)
        pthread_mutex_lock(&forks[(philosopher_number + 1) % N]);

        // Philosopher is eating
        printf("Philosopher %d is eating.\n", philosopher_number);
        sleep(rand() % 3 + 1);  // Simulate eating time

        // Put down right fork
        pthread_mutex_unlock(&forks[(philosopher_number + 1) % N]);

        // Put down left fork
        pthread_mutex_unlock(&forks[philosopher_number]);

        // Philosopher finished eating and starts thinking again
    }

    return NULL;
}

int main() {
    pthread_t threads[N];
    int philosopher_numbers[N];

    // Initialize the mutexes for the forks
    for (int i = 0; i < N; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create threads for each philosopher
    for (int i = 0; i < N; i++) {
        philosopher_numbers[i] = i;
        if (pthread_create(&threads[i], NULL, philosopher, (void*)&philosopher_numbers[i])) {
            printf("Error creating thread for philosopher %d\n", i);
            return 1;
        }
    }

    // Wait for all philosophers to finish (this will never happen in this infinite loop)
    for (int i = 0; i < N; i++) {
        pthread_join(threads[i], NULL);
    }

    // Clean up mutexes
    for (int i = 0; i < N; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}

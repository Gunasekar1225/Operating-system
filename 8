#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
} Process;

// Function to calculate waiting time and turnaround time for Round Robin
void calculate_waiting_and_turnaround_times(Process processes[], int n, int quantum) {
    int current_time = 0;
    int completed = 0;

    // Waiting time initialization for each process
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    // Process runs for a full quantum
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    // Process finishes execution
                    current_time += processes[i].remaining_time;
                    processes[i].waiting_time = current_time - processes[i].burst_time;
                    processes[i].turnaround_time = current_time;
                    processes[i].remaining_time = 0;
                    completed++;
                }
            }
        }
    }
}

// Function to print the results
void print_results(Process processes[], int n) {
    printf("\nProcess Details:\n");
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

// Function to print the Gantt chart
void print_gantt_chart(Process processes[], int n, int quantum) {
    int current_time = 0;
    printf("\nGantt Chart: ");
    for (int i = 0; i < n; i++) {
        int exec_time = (processes[i].remaining_time > quantum) ? quantum : processes[i].remaining_time;
        printf("| P%d ", processes[i].process_id);
        processes[i].remaining_time -= exec_time;
        current_time += exec_time;
    }
    printf("|\n");

    printf("Time: ");
    current_time = 0;
    for (int i = 0; i < n; i++) {
        printf("%d    ", current_time);
        current_time += quantum;
    }
    printf("%d\n", current_time);
}

int main() {
    int n, quantum;

    // Input number of processes and time quantum
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    Process processes[n];

    // Input burst times for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter burst time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Calculate waiting times and turnaround times
    calculate_waiting_and_turnaround_times(processes, n, quantum);

    // Print the Gantt chart
    print_gantt_chart(processes, n, quantum);

    // Print process details (waiting and turnaround times)
    print_results(processes, n);

    return 0;
}

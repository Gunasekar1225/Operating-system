#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <string.h>

#define SHM_SIZE 1024  // Define size of shared memory

// Structure to represent the shared memory data
struct shared_data {
    char message[SHM_SIZE];
};

int main() {
    key_t key = ftok("shmfile", 65);  // Create a unique key using ftok
    int shmid = shmget(key, sizeof(struct shared_data), 0666 | IPC_CREAT);  // Create shared memory segment

    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    struct shared_data* data = (struct shared_data*) shmat(shmid, NULL, 0);  // Attach shared memory segment to process

    if (data == (struct shared_data*) -1) {
        perror("shmat failed");
        exit(1);
    }

    // Create a child process using fork
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child Process
        sleep(1);  // Wait for parent to write data
        printf("Child Process: Read from shared memory: %s\n", data->message);
        
        // Detach shared memory
        if (shmdt(data) == -1) {
            perror("shmdt failed in child");
            exit(1);
        }
    } else {
        // Parent Process
        printf("Parent Process: Writing to shared memory...\n");
        // Write to shared memory
        strcpy(data->message, "Hello from Parent Process!");

        // Wait for child to read
        wait(NULL);

        // Detach shared memory
        if (shmdt(data) == -1) {
            perror("shmdt failed in parent");
            exit(1);
        }

        // Destroy the shared memory segment
        if (shmctl(shmid, IPC_RMID, NULL) == -1) {
            perror("shmctl failed");
            exit(1);
        }

        printf("Parent Process: Shared memory deleted\n");
    }

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_THREADS 5

// Shared data (bank account balance)
int bank_balance = 1000;  // Initial balance of the account

// Mutex lock to protect the shared data
pthread_mutex_t mutex;

// Deposit function
void* deposit(void* arg) {
    int amount = *((int*)arg);

    // Lock the mutex to ensure exclusive access to the shared resource
    pthread_mutex_lock(&mutex);

    printf("Depositing %d to account. Current balance: %d\n", amount, bank_balance);
    bank_balance += amount;  // Update the account balance
    printf("Deposit completed. New balance: %d\n", bank_balance);

    // Unlock the mutex after critical section is complete
    pthread_mutex_unlock(&mutex);

    return NULL;
}

// Withdraw function
void* withdraw(void* arg) {
    int amount = *((int*)arg);

    // Lock the mutex to ensure exclusive access to the shared resource
    pthread_mutex_lock(&mutex);

    if (bank_balance >= amount) {
        printf("Withdrawing %d from account. Current balance: %d\n", amount, bank_balance);
        bank_balance -= amount;  // Update the account balance
        printf("Withdrawal completed. New balance: %d\n", bank_balance);
    } else {
        printf("Insufficient balance to withdraw %d. Current balance: %d\n", amount, bank_balance);
    }

    // Unlock the mutex after critical section is complete
    pthread_mutex_unlock(&mutex);

    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];
    int amounts[NUM_THREADS] = {100, 200, 150, 50, 80};  // Deposit/Withdraw amounts

    // Initialize the mutex lock
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        printf("Mutex initialization failed\n");
        return 1;
    }

    // Create threads (both deposit and withdraw operations)
    for (int i = 0; i < NUM_THREADS; i++) {
        if (i % 2 == 0) {
            // Even indexed threads perform deposit
            pthread_create(&threads[i], NULL, deposit, (void*)&amounts[i]);
        } else {
            // Odd indexed threads perform withdraw
            pthread_create(&threads[i], NULL, withdraw, (void*)&amounts[i]);
        }
    }

    // Wait for all threads to complete
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutex lock
    pthread_mutex_destroy(&mutex);

    // Final account balance
    printf("Final account balance: %d\n", bank_balance);

    return 0;
}

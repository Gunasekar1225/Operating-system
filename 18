#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 1
#define NUM_CONSUMERS 1

// Buffer and pointers
int buffer[BUFFER_SIZE];
int in = 0;  // Points to the next empty slot for the producer
int out = 0; // Points to the next filled slot for the consumer

// Semaphores
sem_t empty;  // Semaphore for empty slots
sem_t full;   // Semaphore for full slots
sem_t mutex;  // Mutex for mutual exclusion

// Producer function
void* producer(void* arg) {
    int item;
    while (1) {
        // Produce an item (here, we're just generating a random number)
        item = rand() % 100;

        // Wait for an empty slot
        sem_wait(&empty);

        // Wait for mutual exclusion to access the buffer
        sem_wait(&mutex);

        // Add item to the buffer
        buffer[in] = item;
        printf("Producer produced: %d at index %d\n", item, in);
        in = (in + 1) % BUFFER_SIZE;

        // Signal that there is a new full slot
        sem_post(&mutex);
        sem_post(&full);

        // Sleep to simulate processing time
        sleep(rand() % 3);
    }
}

// Consumer function
void* consumer(void* arg) {
    int item;
    while (1) {
        // Wait for a full slot
        sem_wait(&full);

        // Wait for mutual exclusion to access the buffer
        sem_wait(&mutex);

        // Remove item from the buffer
        item = buffer[out];
        printf("Consumer consumed: %d from index %d\n", item, out);
        out = (out + 1) % BUFFER_SIZE;

        // Signal that there is a new empty slot
        sem_post(&mutex);
        sem_post(&empty);

        // Sleep to simulate processing time
        sleep(rand() % 3);
    }
}

int main() {
    pthread_t producers[NUM_PRODUCERS], consumers[NUM_CONSUMERS];

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, buffer has all empty slots
    sem_init(&full, 0, 0);  // Initially, no full slots
    sem_init(&mutex, 0, 1);  // Mutex is initially unlocked

    // Create producer and consumer threads
    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_create(&producers[i], NULL, producer, NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_create(&consumers[i], NULL, consumer, NULL);
    }

    // Join the threads
    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producers[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FILES 10  // Maximum number of files that can be stored in the directory

// Structure representing a file in the directory
typedef struct {
    char filename[50];  // File name
} File;

// Function to display the files in the directory
void display_files(File directory[], int n) {
    if (n == 0) {
        printf("No files in the directory.\n");
    } else {
        printf("Files in the directory:\n");
        for (int i = 0; i < n; i++) {
            printf("%d. %s\n", i + 1, directory[i].filename);
        }
    }
}

// Function to add a file to the directory
int add_file(File directory[], int n, const char* filename) {
    if (n < MAX_FILES) {
        strcpy(directory[n].filename, filename);
        return n + 1;  // Return new number of files
    } else {
        printf("Directory is full. Cannot add more files.\n");
        return n;  // Return current number of files
    }
}

// Function to remove a file from the directory
int remove_file(File directory[], int n, const char* filename) {
    int found = -1;
    for (int i = 0; i < n; i++) {
        if (strcmp(directory[i].filename, filename) == 0) {
            found = i;
            break;
        }
    }

    if (found == -1) {
        printf("File not found.\n");
    } else {
        // Shift files to remove the deleted one
        for (int i = found; i < n - 1; i++) {
            strcpy(directory[i].filename, directory[i + 1].filename);
        }
        return n - 1;  // Return new number of files
    }

    return n;  // Return current number of files if no file was removed
}

// Function to search for a file by name
void search_file(File directory[], int n, const char* filename) {
    int found = 0;
    for (int i = 0; i < n; i++) {
        if (strcmp(directory[i].filename, filename) == 0) {
            printf("File '%s' found at position %d.\n", filename, i + 1);
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("File '%s' not found.\n", filename);
    }
}

int main() {
    File directory[MAX_FILES];
    int num_files = 0;
    int choice;
    char filename[50];

    while (1) {
        printf("\nSingle Level Directory Operations:\n");
        printf("1. Add File\n");
        printf("2. Remove File\n");
        printf("3. Display Files\n");
        printf("4. Search for a File\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the filename to add: ");
                scanf("%s", filename);
                num_files = add_file(directory, num_files, filename);
                break;
            case 2:
                printf("Enter the filename to remove: ");
                scanf("%s", filename);
                num_files = remove_file(directory, num_files, filename);
                break;
            case 3:
                display_files(directory, num_files);
                break;
            case 4:
                printf("Enter the filename to search: ");
                scanf("%s", filename);
                search_file(directory, num_files, filename);
                break;
            case 5:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }

    return 0;
}

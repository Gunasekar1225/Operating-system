#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_DIRS 5       // Maximum number of directories in the top-level directory
#define MAX_FILES 10     // Maximum number of files in each subdirectory
#define MAX_NAME_LENGTH 50 // Maximum length of directory or file name

// Structure to represent a file
typedef struct {
    char filename[MAX_NAME_LENGTH]; // Name of the file
} File;

// Structure to represent a subdirectory
typedef struct {
    char dirname[MAX_NAME_LENGTH]; // Name of the subdirectory
    File files[MAX_FILES];         // Files in this subdirectory
    int num_files;                 // Number of files in the subdirectory
} Subdirectory;

// Structure to represent the top-level directory
typedef struct {
    Subdirectory subdirs[MAX_DIRS]; // Subdirectories in the top-level directory
    int num_subdirs;               // Number of subdirectories
} TopLevelDirectory;

// Function to display the files in a subdirectory
void display_files_in_subdir(Subdirectory* subdir) {
    if (subdir->num_files == 0) {
        printf("No files in directory '%s'.\n", subdir->dirname);
    } else {
        printf("Files in directory '%s':\n", subdir->dirname);
        for (int i = 0; i < subdir->num_files; i++) {
            printf("  %d. %s\n", i + 1, subdir->files[i].filename);
        }
    }
}

// Function to display all directories and their files
void display_directory_structure(TopLevelDirectory* tld) {
    if (tld->num_subdirs == 0) {
        printf("No subdirectories in the top-level directory.\n");
    } else {
        for (int i = 0; i < tld->num_subdirs; i++) {
            display_files_in_subdir(&tld->subdirs[i]);
        }
    }
}

// Function to add a subdirectory to the top-level directory
int add_subdirectory(TopLevelDirectory* tld, const char* dirname) {
    if (tld->num_subdirs < MAX_DIRS) {
        strcpy(tld->subdirs[tld->num_subdirs].dirname, dirname);
        tld->subdirs[tld->num_subdirs].num_files = 0; // Initialize file count
        return ++tld->num_subdirs;  // Return new number of subdirectories
    } else {
        printf("Top-level directory is full. Cannot add more subdirectories.\n");
        return tld->num_subdirs;
    }
}

// Function to add a file to a specific subdirectory
int add_file_to_subdir(Subdirectory* subdir, const char* filename) {
    if (subdir->num_files < MAX_FILES) {
        strcpy(subdir->files[subdir->num_files].filename, filename);
        return ++subdir->num_files;  // Return new number of files in subdirectory
    } else {
        printf("Subdirectory '%s' is full. Cannot add more files.\n", subdir->dirname);
        return subdir->num_files;
    }
}

// Function to remove a file from a subdirectory
int remove_file_from_subdir(Subdirectory* subdir, const char* filename) {
    int found = -1;
    for (int i = 0; i < subdir->num_files; i++) {
        if (strcmp(subdir->files[i].filename, filename) == 0) {
            found = i;
            break;
        }
    }

    if (found == -1) {
        printf("File '%s' not found in directory '%s'.\n", filename, subdir->dirname);
    } else {
        // Shift files to remove the deleted one
        for (int i = found; i < subdir->num_files - 1; i++) {
            strcpy(subdir->files[i].filename, subdir->files[i + 1].filename);
        }
        return --subdir->num_files;  // Return new number of files in subdirectory
    }

    return subdir->num_files;
}

// Function to search for a file in all subdirectories
void search_file_in_dir(TopLevelDirectory* tld, const char* filename) {
    int found = 0;
    for (int i = 0; i < tld->num_subdirs; i++) {
        for (int j = 0; j < tld->subdirs[i].num_files; j++) {
            if (strcmp(tld->subdirs[i].files[j].filename, filename) == 0) {
                printf("File '%s' found in directory '%s'.\n", filename, tld->subdirs[i].dirname);
                found = 1;
                break;
            }
        }
        if (found) break;
    }

    if (!found) {
        printf("File '%s' not found in any directory.\n", filename);
    }
}

int main() {
    TopLevelDirectory tld;
    tld.num_subdirs = 0;  // Initialize top-level directory

    int choice;
    char dirname[MAX_NAME_LENGTH];
    char filename[MAX_NAME_LENGTH];

    while (1) {
        printf("\nTwo-Level Directory System Operations:\n");
        printf("1. Add Subdirectory\n");
        printf("2. Add File to Subdirectory\n");
        printf("3. Remove File from Subdirectory\n");
        printf("4. Display Directory Structure\n");
        printf("5. Search for a File\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter subdirectory name: ");
                scanf("%s", dirname);
                add_subdirectory(&tld, dirname);
                break;

            case 2:
                printf("Enter subdirectory name: ");
                scanf("%s", dirname);
                int subdir_index = -1;
                for (int i = 0; i < tld.num_subdirs; i++) {
                    if (strcmp(tld.subdirs[i].dirname, dirname) == 0) {
                        subdir_index = i;
                        break;
                    }
                }
                if (subdir_index != -1) {
                    printf("Enter filename to add: ");
                    scanf("%s", filename);
                    add_file_to_subdir(&tld.subdirs[subdir_index], filename);
                } else {
                    printf("Subdirectory '%s' not found.\n", dirname);
                }
                break;

            case 3:
                printf("Enter subdirectory name: ");
                scanf("%s", dirname);
                subdir_index = -1;
                for (int i = 0; i < tld.num_subdirs; i++) {
                    if (strcmp(tld.subdirs[i].dirname, dirname) == 0) {
                        subdir_index = i;
                        break;
                    }
                }
                if (subdir_index != -1) {
                    printf("Enter filename to remove: ");
                    scanf("%s", filename);
                    remove_file_from_subdir(&tld.subdirs[subdir_index], filename);
                } else {
                    printf("Subdirectory '%s' not found.\n", dirname);
                }
                break;

            case 4:
                display_directory_structure(&tld);
                break;

            case 5:
                printf("Enter filename to search: ");
                scanf("%s", filename);
                search_file_in_dir(&tld, filename);
                break;

            case 6:
                printf("Exiting the program.\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int waiting_time;
    int turnaround_time;
} Process;

void calculate_waiting_time(Process processes[], int n) {
    processes[0].waiting_time = 0;  // First process has no waiting time

    // Calculate waiting time for each process
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
}

void calculate_turnaround_time(Process processes[], int n) {
    // Turnaround time = waiting time + burst time
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }
}

void print_gantt_chart(Process processes[], int n) {
    printf("\nGantt Chart: ");
    for (int i = 0; i < n; i++) {
        printf("| P%d ", processes[i].process_id);
    }
    printf("|\n");

    int time = 0;
    printf("Time: ");
    for (int i = 0; i < n; i++) {
        printf("%d    ", time);
        time += processes[i].burst_time;
    }
    printf("%d\n", time);
}

void print_process_details(Process processes[], int n) {
    printf("\nProcess Details:\n");
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input process burst times
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter burst time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Calculate waiting times and turnaround times
    calculate_waiting_time(processes, n);
    calculate_turnaround_time(processes, n);

    // Print the Gantt chart
    print_gantt_chart(processes, n);

    // Print process details (waiting and turnaround times)
    print_process_details(processes, n);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Size of the buffer

// Shared buffer
int buffer[BUFFER_SIZE];
int in = 0, out = 0;  // Indices for producer and consumer

// Semaphores for synchronization
sem_t empty, full;
pthread_mutex_t mutex;

// Producer function
void* producer(void* arg) {
    int item;
    
    while (1) {
        item = rand() % 100;  // Produce a random item
        sleep(1);  // Simulate time taken to produce an item

        // Wait for an empty slot in the buffer
        sem_wait(&empty);

        // Lock the buffer before adding the item
        pthread_mutex_lock(&mutex);

        // Add the item to the buffer
        buffer[in] = item;
        printf("Producer produced item: %d at position %d\n", item, in);
        in = (in + 1) % BUFFER_SIZE;

        // Unlock the buffer
        pthread_mutex_unlock(&mutex);

        // Signal that there is a new full slot in the buffer
        sem_post(&full);
    }

    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    int item;
    
    while (1) {
        // Wait for a full slot in the buffer
        sem_wait(&full);

        // Lock the buffer before consuming the item
        pthread_mutex_lock(&mutex);

        // Consume an item from the buffer
        item = buffer[out];
        printf("Consumer consumed item: %d from position %d\n", item, out);
        out = (out + 1) % BUFFER_SIZE;

        // Unlock the buffer
        pthread_mutex_unlock(&mutex);

        // Signal that there is a new empty slot in the buffer
        sem_post(&empty);

        sleep(1);  // Simulate time taken to consume an item
    }

    return NULL;
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize the semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all slots are empty
    sem_init(&full, 0, 0);  // Initially, no slots are full
    pthread_mutex_init(&mutex, NULL);  // Initialize the mutex lock

    // Create the producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Join the threads (though this will run indefinitely in this simulation)
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Destroy the mutex and semaphores
    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
